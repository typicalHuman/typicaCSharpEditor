<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HL</name>
    </assembly>
    <members>
        <member name="T:HL.HighlightingTheme.GlobalStyle">
            <summary>
            Implements an object that holds general color and style definitions for the
            Editor. These style definitions are usually non-highlighting language specific
            (eg Hyperlink color) and can overwrite existing WPF definition (eg background or
            foreground color)
            </summary>
        </member>
        <member name="M:HL.HighlightingTheme.GlobalStyle.#ctor(System.String)">
            <summary>
            Construct a named (eg. 'Comment') WordStyle object
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="M:HL.HighlightingTheme.GlobalStyle.#ctor">
            <summary>
            Hidden standard constructor
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.GlobalStyle.TypeName">
            <summary>
            Typed name of <seealso cref="T:HL.HighlightingTheme.GlobalStyle"/> object
            
            (eg 'DefaultStyle', 'NonPrintableCharacter' ...,
            (this is usually the key in a collection of these styles)
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.GlobalStyle.foregroundcolor">
            <summary>
            Get/set brush definition for the foreground used in this style
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.GlobalStyle.backgroundcolor">
            <summary>
            Get/set brush definition for the background used in this style
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.GlobalStyle.bordercolor">
            <summary>
            Get/set brush definition for the border used in this style
            </summary>
        </member>
        <member name="M:HL.HighlightingTheme.GlobalStyle.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:HL.HighlightingTheme.SyntaxDefinition">
            <summary>
            Implements the object that keeps track of each syntax definition reference
            within a highlighting theme definition.
            </summary>
        </member>
        <member name="M:HL.HighlightingTheme.SyntaxDefinition.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:HL.HighlightingTheme.SyntaxDefinition.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.SyntaxDefinition.Name">
            <summary>
            Gets/Sets the name of the color.
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.SyntaxDefinition.Extensions">
            <summary>
            Gets the associated extensions.
            </summary>
        </member>
        <member name="P:HL.HighlightingTheme.SyntaxDefinition.NamedHighlightingColors">
            <summary>
            Gets an enumeration of all highlighting colors that are defined
            for this highlighting pattern (eg. C#) as part of a highlighting theme (eg 'True Blue').
            </summary>
        </member>
        <member name="M:HL.HighlightingTheme.SyntaxDefinition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HL.HighlightingTheme.SyntaxDefinition.ColorGet(System.String)">
            <summary>
            Gets a named color definition or null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HL.HighlightingTheme.SyntaxDefinition.ColorAdd(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
             <summary>
             Adds another named color definition.
             Exceptions:
               <see cref="T:System.ArgumentNullException"/>
                 key is null.
            
               <see cref="T:System.ArgumentException"/>
                 An element with the same key already exists in the System.Collections.Generic.Dictionary`2.
             </summary>
             <param name="color"></param>
        </member>
        <member name="T:HL.Manager.HighlightingThemeLoader">
            <summary>
            Static class with helper methods to load XSHTD highlighting files.
            </summary>
        </member>
        <member name="M:HL.Manager.HighlightingThemeLoader.LoadXshd(System.Xml.XmlReader)">
            <summary>
            Lodas a syntax definition from the xml reader.
            </summary>
        </member>
        <member name="M:HL.Manager.HighlightingThemeLoader.Load(HL.Xshtd.XhstdThemeDefinition,HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="M:HL.Manager.HighlightingThemeLoader.Load(System.Xml.XmlReader,HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="T:HL.Manager.XshtdLoader">
            <summary>
            Loads .xshd files, version 2.0.
            Version 2.0 files are recognized by the namespace.
            </summary>
        </member>
        <member name="M:HL.Manager.XshtdLoader.SetPosition(HL.Xshtd.XshtdElement,System.Xml.XmlReader)">
            <summary>
            Sets the element's position to the XmlReader's position.
            </summary>
        </member>
        <member name="T:HL.Manager.BusyManager">
            <summary>
            This class is used to prevent stack overflows by representing a 'busy' flag
            that prevents reentrance when another call is running.
            However, using a simple 'bool busy' is not thread-safe, so we use a
            thread-static BusyManager.
            </summary>
        </member>
        <member name="T:HL.Manager.DefaultHighlightingManager">
            <summary>
            Implements a default highlighting manager for
            AvalonEdit based themable syntax highlighting definitions.
            </summary>
        </member>
        <member name="M:HL.Manager.DefaultHighlightingManager.#cctor">
            <summary>
            Static class constructor
            </summary>
        </member>
        <member name="M:HL.Manager.DefaultHighlightingManager.#ctor">
            <summary>
            Default class constructor
            </summary>
        </member>
        <member name="F:HL.Manager.DefaultHighlightingManager.Instance">
            <summary>
            Gets an instance of a <see cref="T:HL.Manager.DefaultHighlightingManager"/> object.
            </summary>
        </member>
        <member name="M:HL.Manager.DefaultHighlightingManager.RegisterHighlighting(HL.Manager.IHLTheme,System.String,System.String[],System.String)">
            <summary>
            Registering a built-in highlighting including highlighting themes (if any).
            </summary>
            <param name="theme"></param>
            <param name="name"></param>
            <param name="extensions"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:HL.Manager.DefaultHighlightingManager.LoadHighlighting(HL.Manager.IHLTheme,System.String,System.String)">
            <summary>
            Gets a function that is used to load highlighting definition in a delayed/defered way
            (usually active only when 'Release' is configured).
            </summary>
            <param name="name"></param>
            <param name="theme"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="F:HL.Manager.ExtensionMethods.Epsilon">
            <summary>
            Epsilon used for <c>IsClose()</c> implementations.
            We can use up quite a few digits in front of the decimal point (due to visual positions being relative to document origin),
            and there's no need to be too accurate (we're dealing with pixels here),
            so we will use the value 0.01.
            Previosly we used 1e-8 but that was causing issues:
            http://community.sharpdevelop.net/forums/t/16048.aspx
            </summary>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.IsClose(System.Double,System.Double)">
            <summary>
            Returns true if the doubles are close (difference smaller than 0.01).
            </summary>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.CoerceValue(System.Double,System.Double,System.Double)">
            <summary>
            Forces the value to stay between mininum and maximum.
            </summary>
            <returns>minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.CoerceValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forces the value to stay between mininum and maximum.
            </summary>
            <returns>minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.Sequence``1(``0)">
            <summary>
            Creates an IEnumerable with a single value.
            </summary>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.GetAttributeOrNull(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the attribute, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.GetBoolAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the attribute as boolean, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:HL.Manager.ExtensionMethods.GetBoolAttribute(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the value of the attribute as boolean, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="T:HL.Manager.SystemColorHighlightingBrush">
            <summary>
            HighlightingBrush implementation that finds a brush using a resource.
            </summary>
        </member>
        <member name="T:HL.Manager.HighlightingLoader">
            <summary>
            Static class with helper methods to load XSHD highlighting files.
            </summary>
        </member>
        <member name="M:HL.Manager.HighlightingLoader.LoadXshd(System.Xml.XmlReader)">
            <summary>
            Lodas a syntax definition from the xml reader.
            </summary>
        </member>
        <member name="M:HL.Manager.HighlightingLoader.Load(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="M:HL.Manager.HighlightingLoader.Load(HL.HighlightingTheme.SyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Loads a highlighting definition base on a:
            </summary>
            <param name="themedHighlights">
            Themed Highlighting Definition
            (This contains the color definition for a highlighting in this theme)
            </param>
            <param name="syntaxDefinition">
            A Highlighting definition
            (This contains the pattern matching and color definitions where the later
             is usually overwritten be a highlighting theme)
            </param>
            <param name="resolver">An object that can resolve a highlighting definition by its name.</param>
            <returns></returns>
        </member>
        <member name="M:HL.Manager.HighlightingLoader.Load(System.Xml.XmlReader,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file that is already initialled
            in the <see cref="T:System.Xml.XmlReader"/> instance of the <paramref name="reader"/> parameter.
            </summary>
        </member>
        <member name="T:HL.Manager.HLTheme">
            <summary>
            Implements a highlighting theme which is based on a WPF theme (eg. 'Light')
            with a corresponding set of highlighting definitions (eg. 'XML', 'C#' etc)
            to ensure that highlightings are correct in the contecxt of
            (different background colors) WPF themes.
            </summary>
        </member>
        <member name="M:HL.Manager.HLTheme.#ctor(System.String,System.String,System.String)">
            <summary>
            Class constructor for GENERIC highlighting definitions.
            
            Generic highlighting definitions ar usually defined in xshd
            files and stand on their own (do not need additional processing/resources
            to compute highlighting rules and formating information).
            </summary>
            <param name="paramKey"></param>
            <param name="paramHLBasePrefix"></param>
            <param name="paramDisplayName"></param>
        </member>
        <member name="M:HL.Manager.HLTheme.#ctor(System.String,System.String,System.String,System.String,System.String,HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver)">
            <summary>
            Class constructor for derived highlighting themes.
            
            Derived highlighting themes have a base highlighting (eg 'Light')
            and an 'overwritting' highlighting themes definition using an xshTd file resource.
            </summary>
            <param name="paramKey"></param>
            <param name="paramHLBaseKey"></param>
            <param name="paramDisplayName"></param>
            <param name="paramHLThemePrefix"></param>
            <param name="paramHLThemeName"></param>
            <param name="themeResolver"></param>
        </member>
        <member name="M:HL.Manager.HLTheme.#ctor">
            <summary>
            Hidden class constructor
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.Key">
            <summary>
            Gets the display independent key value that should by unique in an
            overall collection of highlighting themes and should be used for retrieval purposes.
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.HLBasePrefix">
            <summary>
            Gets the prefix of the XSHD resources that should be used to lookup
            the actual resource for this theme.
            
            This property is null for a derived highlighting theme since finding its
            base highlighting should by performed through <see cref="P:HL.Manager.HLTheme.HLBaseKey"/>
            and the corresponding <see cref="P:HL.Manager.HLTheme.HLBasePrefix"/> property of that entry.
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.HLBaseKey">
            <summary>
            Gets the name of theme (eg. 'Dark' or 'Light' which is used as
            the base of a derived highlighting theme.
            
            This property has the same value as the <see cref="P:HL.Manager.HLTheme.Key"/> property
            if the highlighting is GENERIC (since these highlightings come without
            additional theme resources).
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.HLThemePrefix">
            <summary>
            Gets the prefix of the resource under which a theme resource definition
            file xshTd can be found (eg 'HL.Resources.Themes').
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.HLThemeFileName">
            <summary>
            Gets the file name under which a theme resource definition
            file xshTd can be found (eg 'Dark.xshtd').
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.DisplayName">
            <summary>
            Gets the name of theme (eg. 'Dark', 'Light' or 'True Blue' for display purposes in the UI.
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.HighlightingDefinitions">
            <summary>
            Gets an (ordered by Name) list copy of all highlightings defined in this object.
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.HlTheme">
            <summary>
            Gets the theme highlighting definition for this theme
            or null (highlighting definition is generic and not based on a theme).
            </summary>
        </member>
        <member name="P:HL.Manager.HLTheme.IsBuiltInThemesRegistered">
            <summary>
            Gets/sets whether built-in themes have already been registered or not
            Use this to avoid registration of built-in themes twice for one and the
            same highlighting theme.
            </summary>
        </member>
        <member name="M:HL.Manager.HLTheme.GetDefinition(System.String)">
            <summary>
            Gets the highlighting definition by name, or null if it is not found.
            </summary>
        </member>
        <member name="M:HL.Manager.HLTheme.GetThemeDefinition(System.String)">
            <summary>
            Gets the highlighting theme definition  by name, or null if it is not found.
            </summary>
        </member>
        <member name="M:HL.Manager.HLTheme.GetDefinitionByExtension(System.String)">
            <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:HL.Manager.HLTheme.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="highlighting">The highlighting definition.</param>
        </member>
        <member name="M:HL.Manager.HLTheme.ResolveHighLightingTheme">
            <summary>
            Loads the highlighting theme for this highlighting definition
            (if an additional theme was configured)
            </summary>
        </member>
        <member name="M:HL.Manager.HLTheme.ResolveHighLightingTheme(System.String,System.String)">
            <summary>
            Converts a XSHTD reference from namespace prefix and themename
            into a <see cref="T:HL.Xshtd.XhstdThemeDefinition"/> object and returns it.
            </summary>
            <param name="hLPrefix"></param>
            <param name="hLThemeName"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Manager.IHLTheme">
            <summary>
            Defines a highlighting theme which is based on a WPF theme (eg. 'Light')
            with a corresponding set of highlighting definitions (eg. 'XML', 'C#' etc)
            to ensure that highlightings are correct in the contecxt of
            (different background colors) WPF themes.
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.Key">
            <summary>
            Gets the display independent key value that should by unique in an
            overall collection of highlighting themes and should be used for retrieval purposes.
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.HLBasePrefix">
            <summary>
            Gets the prefix of the XSHD resources that should be used to lookup
            the actual resource for this theme.
            
            This property is null for a derived highlighting theme since finding its
            base highlighting should by performed through <see cref="P:HL.Manager.IHLTheme.HLBaseKey"/>
            and the corresponding <see cref="P:HL.Manager.IHLTheme.HLBasePrefix"/> property of that entry.
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.HLBaseKey">
            <summary>
            Gets the name of theme (eg. 'Dark' or 'Light' which is used as
            the base of a derived highlighting theme.
            
            This property has the same value as the <see cref="P:HL.Manager.IHLTheme.Key"/> property
            if the highlighting is GENERIC (since these highlightings come without
            additional theme resources).
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.HLThemePrefix">
            <summary>
            Gets the prefix of the resource under which a theme resource definition
            file xshTd can be found (eg 'HL.Resources.Themes').
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.HLThemeFileName">
            <summary>
            Gets the file name under which a theme resource definition
            file xshTd can be found (eg 'Dark.xshtd').
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.DisplayName">
            <summary>
            Gets the name of theme (eg. 'Dark', 'Light' or 'True Blue' for display purposes in the UI.
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.HighlightingDefinitions">
            <summary>
            Gets a copy of all highlightings defined in this object.
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.HlTheme">
            <summary>
            Gets the theme highlighting definition for this theme
            or null (highlighting definition is generic and not based on a theme).
            </summary>
        </member>
        <member name="P:HL.Manager.IHLTheme.IsBuiltInThemesRegistered">
            <summary>
            Gets/sets whether built-in themes have already been registered or not
            Use this to avoid registration of built-in themes twice for one and the
            same highlighting theme.
            </summary>
        </member>
        <member name="M:HL.Manager.IHLTheme.GetDefinition(System.String)">
            <summary>
            Gets the highlighting definition by name, or null if it is not found.
            </summary>
        </member>
        <member name="M:HL.Manager.IHLTheme.GetDefinitionByExtension(System.String)">
            <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:HL.Manager.IHLTheme.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="highlighting">The highlighting definition.</param>
        </member>
        <member name="M:HL.Manager.IHLTheme.GetThemeDefinition(System.String)">
            <summary>
            Gets the highlighting theme definition  by name, or null if it is not found.
            </summary>
            <param name="highlightingName"></param>
        </member>
        <member name="M:HL.Manager.IHLTheme.ResolveHighLightingTheme(System.String,System.String)">
            <summary>
            Converts a XSHD reference from namespace prefix and themename
            into a <see cref="T:HL.Xshtd.XhstdThemeDefinition"/> object and returns it.
            </summary>
            <param name="hLPrefix"></param>
            <param name="hLThemeName"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Manager.ThemedHighlightingManager">
            <summary>
            Implements a Highlighting Manager that associates syntax highlighting definitions with file extentions
            (*.cs -> 'C#') with consideration of the current WPF App theme
            
            Extension  App Theme   SyntaxHighlighter
            (*.cs  +   'Dark')  -> 'C#' (with color definitions for 'Dark')
            </summary>
        </member>
        <member name="F:HL.Manager.ThemedHighlightingManager.HL_GENERIC_NAMESPACE_ROOT">
            <summary>
            Defines the root namespace under which the built-in xshd highlighting
            resource files can be found
            (eg all highlighting for 'Light' should be located here).
            </summary>
        </member>
        <member name="F:HL.Manager.ThemedHighlightingManager.HL_THEMES_NAMESPACE_ROOT">
            <summary>
            Defines the root namespace under which the built-in additional xshtd highlighting theme
            resource files can be found
            (eg 'Dark' and 'TrueBlue' themes should be located here).
            </summary>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:HL.Manager.ThemedHighlightingManager.CurrentTheme">
            <summary>
            Gets the current highlighting theme (eg 'Light' or 'Dark') that should be used as
            a base for the syntax highlighting in AvalonEdit.
            </summary>
        </member>
        <member name="P:HL.Manager.ThemedHighlightingManager.Instance">
            <summary>
            Gets the default HighlightingManager instance.
            The default HighlightingManager comes with built-in highlightings.
            </summary>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.ICSharpCode#AvalonEdit#Highlighting#IHighlightingDefinitionReferenceResolver#GetDefinition(System.String)">
            <summary>
            Gets the highlighting definition by name, or null if it is not found.
            </summary>
        </member>
        <member name="P:HL.Manager.ThemedHighlightingManager.HighlightingDefinitions">
            <summary>
            Gets an (ordered by Name) list copy of all highlightings defined in this object
            or an empty collection if there is no highlighting definition available.
            </summary>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.GetDefinitionByExtension(System.String)">
            <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Registers a highlighting definition for the <see cref="P:HL.Manager.ThemedHighlightingManager.CurrentTheme"/>.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="highlighting">The highlighting definition.</param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.RegisterHighlighting(System.String,System.String[],System.Func{ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition})">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="lazyLoadedHighlighting">A function that loads the highlighting definition.</param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.SetCurrentTheme(System.String)">
            <summary>
            Sets the current highlighting based on the name of the given highцighting theme.
            (eg: WPF APP Theme 'TrueBlue' -> Resolve highlighting 'C#' to 'TrueBlue'->'C#')
            
            Throws an <see cref="T:System.IndexOutOfRangeException"/> if the WPF APP theme is not known.
            </summary>
            <param name="themeNameKey"></param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.ThemedHighlightingAdd(System.String,HL.Manager.IHLTheme)">
            <summary>
            Adds another highlighting theme into the current collection of highlighting themes.
            </summary>
            <param name="key"></param>
            <param name="theme"></param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.ThemedHighlightingRemove(System.String)">
            <summary>
            Removes a highlighting theme from the current collection
            of highlighting themes.
            </summary>
            <param name="removekey"></param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.SetCurrentThemeInternal(System.String)">
            <summary>
            Initializes the current default theme available at start-up of application
            (without registration of highlightings).
            </summary>
            <param name="themeNameKey"></param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.GetPrefix(System.String)">
            <summary>
            Helper method to find the correct namespace of an internal xshd resource
            based on the name of a (WPF) theme (eg. 'TrueBlue') and an internal
            constant (eg. 'HL.Resources')
            </summary>
            <param name="themeNameKey"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.HL#Xshtd#interfaces#IHighlightingThemeDefinitionReferenceResolver#GetThemeDefinition(System.String)">
            <summary>
            Gets the highlighting theme definition by name, or null if there is none to be found.
            </summary>
            <param name="highlightingName"></param>
        </member>
        <member name="M:HL.Manager.ThemedHighlightingManager.HL#Xshtd#interfaces#IHighlightingThemeDefinitionReferenceResolver#GetThemeDefinition(System.String,System.String)">
            <summary>
            Gets the highlighting theme definition by name of the theme (eg 'Dark2' or 'TrueBlue')
            and the highlighting, or null if there is none to be found.
            </summary>
            <param name="hlThemeName"></param>
            <param name="highlightingName"></param>
        </member>
        <member name="T:HL.Manager.V2Loader">
            <summary>
            Loads .xshd files, version 2.0.
            Version 2.0 files are recognized by the namespace.
            </summary>
        </member>
        <member name="M:HL.Manager.V2Loader.SetPosition(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement,System.Xml.XmlReader)">
            <summary>
            Sets the element's position to the XmlReader's position.
            </summary>
        </member>
        <member name="M:HL.Manager.XmlHighlightingDefinition.#ctor(HL.HighlightingTheme.SyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Class constructor from highlighting theme definition resolver
            and highlighting definition (and resolver)
            </summary>
            <param name="xshd"></param>
            <param name="resolver"></param>
            <param name="themedHighlights"></param>
        </member>
        <member name="F:HL.Manager.XmlHighlightingDefinition._themedHighlights">
            <summary>
            Defines highlighting theme information (if any is applicable) for this highlighting.
            </summary>
        </member>
        <member name="M:HL.Resources.HLResources.OpenStream(System.String,System.String)">
            <summary>
            Open a <see cref="T:System.IO.Stream"/> object to an internal resource (eg: xshd file)
            to load its contents from an 'Embedded Resource'.
            </summary>
            <param name="prefix"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Resources.HLResources.RegisterBuiltInHighlightings(HL.Manager.DefaultHighlightingManager,HL.Manager.IHLTheme)">
            <summary>
            Registers the built-in highlighting definitions on first time request for a definition
            or when the application changes its WPF Theme (eg. from 'Light' to 'Dark') to load the
            appropriate highlighting resource when queried for it.
            </summary>
            <param name="hlm"></param>
            <param name="theme"></param>
        </member>
        <member name="T:HL.Interfaces.IThemedHighlightingManager">
            <summary>
            Defines a Highlighting Manager that associates syntax highlighting definitions with file extentions
            (*.cs -> 'C#') with consideration of the current WPF App theme
            
            Extension  App Theme   SyntaxHighlighter
            (*.cs  +   'Dark')  -> 'C#' (with color definitions for 'Dark')
            </summary>
        </member>
        <member name="P:HL.Interfaces.IThemedHighlightingManager.CurrentTheme">
            <summary>
            Gets the current highlighting theme (eg 'Light' or 'Dark') that should be used as
            a base for the syntax highlighting in AvalonEdit.
            </summary>
        </member>
        <member name="P:HL.Interfaces.IThemedHighlightingManager.HighlightingDefinitions">
            <summary>
            Gets a copy of all highlightings.
            </summary>
        </member>
        <member name="M:HL.Interfaces.IThemedHighlightingManager.GetDefinitionByExtension(System.String)">
            <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:HL.Interfaces.IThemedHighlightingManager.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Registers a highlighting definition for the <see cref="P:HL.Interfaces.IThemedHighlightingManager.CurrentTheme"/>.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="highlighting">The highlighting definition.</param>
        </member>
        <member name="M:HL.Interfaces.IThemedHighlightingManager.RegisterHighlighting(System.String,System.String[],System.Func{ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition})">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="lazyLoadedHighlighting">A function that loads the highlighting definition.</param>
        </member>
        <member name="M:HL.Interfaces.IThemedHighlightingManager.SetCurrentTheme(System.String)">
            <summary>
            Resets the highlighting theme based on the name of the WPF App Theme
            (eg: WPF APP Theme 'Dark' -> Resolve highlighting 'C#' to 'Dark'->'C#')
            
            Throws an <see cref="T:System.IndexOutOfRangeException"/> if the WPF APP theme is not known.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:HL.Xshtd.interfaces.IFreezable">
            <summary>
            Defines a freezable base for all objects that should be freezable.
            Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="P:HL.Xshtd.interfaces.IFreezable.IsFrozen">
            <summary>
            Gets if this instance is frozen. Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="M:HL.Xshtd.interfaces.IFreezable.Freeze">
            <summary>
            Freezes this instance.
            </summary>
        </member>
        <member name="M:HL.Xshtd.interfaces.FreezableHelper.GetFrozenClone``1(``0)">
            <summary>
            If the item is not frozen, this method creates and returns a frozen clone.
            If the item is already frozen, it is returned without creating a clone.
            </summary>
        </member>
        <member name="T:HL.Xshtd.interfaces.AbstractFreezable">
            <summary>
            Implements a freezable base for all objects that should be freezable.
            Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="P:HL.Xshtd.interfaces.AbstractFreezable.IsFrozen">
            <summary>
            Gets if this instance is frozen. Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="M:HL.Xshtd.interfaces.AbstractFreezable.Freeze">
            <summary>
            Freezes this instance.
            </summary>
        </member>
        <member name="M:HL.Xshtd.interfaces.AbstractFreezable.FreezeInternal">
            <summary>
            Provides a way of freezing additional elements defined in inheriting
            classes through the invocation of the <see cref="M:HL.Xshtd.interfaces.AbstractFreezable.Freeze"/> method.
            </summary>
        </member>
        <member name="T:HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver">
            <summary>
            Defines a resolver interface that can find highlighting theme definitions
            based on a highlighting name (searches within the current highlighting theme)
            or based on a highlighting name and name of highlighting theme that should
            contain the highlighting definition.
            </summary>
        </member>
        <member name="M:HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver.GetThemeDefinition(System.String)">
            <summary>
            Gets a highlighting definition within the current highlighting theme
            by name, or null.
            </summary>
            <param name="highlightingName"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver.GetThemeDefinition(System.String,System.String)">
            <summary>
            Gets a highlighting theme definition by name from a given highlighting
            theme obtained via <paramref name="hlThemeName"/> or null.
            </summary>
            <param name="hlThemeName"></param>
            <param name="highlightingName"></param>
        </member>
        <member name="T:HL.Xshtd.interfaces.IHighlightingThemeDefinition">
            <summary>
            A highlighting definition.
            </summary>
        </member>
        <member name="P:HL.Xshtd.interfaces.IHighlightingThemeDefinition.Name">
            <summary>
            Gets the name of the highlighting theme definition.
            </summary>
        </member>
        <member name="M:HL.Xshtd.interfaces.IHighlightingThemeDefinition.GetNamedSyntaxDefinition(System.String)">
            <summary>
            Gets a named highlighting color.
            </summary>
            <returns>The highlighting color, or null if it is not found.</returns>
        </member>
        <member name="P:HL.Xshtd.interfaces.IHighlightingThemeDefinition.GlobalStyles">
            <summary>
            Gets all global stayles in the collection of global styles.
            </summary>
        </member>
        <member name="T:HL.Xshtd.IXshtdVisitor">
            <summary>
            Implements an interface for usage in a Visitor pattern based implementation.
            This visitor pattern can be used to visit the elements of an XSHTD element tree.
            
            A visitor pattern can be used in many ways, here its used for syntax checks and
            object conversion (from POCO XML object to non-xml .net object).
            </summary>
        </member>
        <member name="M:HL.Xshtd.IXshtdVisitor.VisitColor(HL.Xshtd.XshtdSyntaxDefinition,HL.Xshtd.XshtdColor)">
            <summary>
            Implements the visitor for a named color (<see cref="T:HL.Xshtd.XshtdColor"/> object)
            that is contained in a <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object.
            </summary>
            <param name="syntax"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.IXshtdVisitor.VisitSyntaxDefinition(HL.Xshtd.XshtdSyntaxDefinition)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object.
            </summary>
            <param name="syntax">the element to be visited.</param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.IXshtdVisitor.VisitGlobalStyles(HL.Xshtd.XshtdGlobalStyles)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdGlobalStyles"/> object.
            </summary>
            <param name="globStyles">the element to be visited.</param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.IXshtdVisitor.VisitGlobalStyle(HL.Xshtd.XshtdGlobalStyles,HL.Xshtd.XshtdGlobalStyle)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdGlobalStyle"/> object
            contained in a <see cref="T:HL.Xshtd.XshtdGlobalStyles"/> object.
            </summary>
            <param name="globStyles"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XhstdThemeDefinition">
            <summary>
            An Xml highlighting theme element.
            
            <see cref="T:HL.Xshtd.XmlHighlightingThemeDefinition"/> for equivalent run-time object.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XhstdThemeDefinition.#ctor">
            <summary>
            Creates a new XhstdThemeDefinition object.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XhstdThemeDefinition.Name">
            <summary>
            Gets/sets the highlighting theme definition name (eg. 'Dark', 'TrueBlue')
            as stated in the Name attribute of the xshtd (xs highlighting theme definition) file.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XhstdThemeDefinition.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XhstdThemeDefinition.GlobalStyleElements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XhstdThemeDefinition.AcceptVisitor(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="T:HL.Xshtd.XmlHighlightingThemeDefinition">
            <summary>
            Implements a highlighting theme definition object that provides all run-time
            relevant properties and methods to work with themes in the context of highlightings.
            
            <see cref="T:HL.Xshtd.XhstdThemeDefinition"/> for equivalent Xml persistance layer object.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.#ctor(HL.Xshtd.XhstdThemeDefinition,HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver)">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:HL.Xshtd.XmlHighlightingThemeDefinition.Name">
            <summary>
            Gets/sets the highlighting theme definition name (eg. 'Dark', 'TrueBlue')
            as stated in the Name attribute of the xshtd (xs highlighting theme definition) file.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XmlHighlightingThemeDefinition.GlobalStyles">
            <summary>
            Gets all global stayles in the collection of global styles.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.GetNamedSyntaxDefinition(System.String)">
            <summary>
            Gets the syntaxdefinition colors that should be applied for a certain highlighting (eg 'C#')
            within this theme (eg TrueBlue).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.GetNamedColor(System.String,System.String)">
            <summary>
            Gets a highlighting color based on the name of the syntax definition
            and the name of the color that should be contained in it.
            </summary>
            <param name="synDefName"></param>
            <param name="colorName"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.NamedHighlightingColors(System.String)">
            <summary>
            Gets an enumeration of all highlighting colors that are defined
            for this highlighting pattern (eg. C#) as part of a highlighting theme (eg 'True Blue').
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.Error(HL.Xshtd.XshtdElement,System.String)">
            <summary>
            Helper method to generate a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException"/>
            containing more insights (line number, coloumn) to verify the actual problem.
            </summary>
            <param name="element"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XmlHighlightingThemeDefinition.RegisterNamedElementsVisitor">
            <summary>
            Implements the visitor pattern based on the <see cref="T:HL.Xshtd.IXshtdVisitor"/> interface
            to register all elements of a given XML element tree and check whether their syntax
            is as expected or not.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.RegisterNamedElementsVisitor.#ctor(HL.Xshtd.XmlHighlightingThemeDefinition)">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.RegisterNamedElementsVisitor.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.RegisterNamedElementsVisitor.VisitSyntaxDefinition(HL.Xshtd.XshtdSyntaxDefinition)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object.
            </summary>
            <param name="syntax"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.RegisterNamedElementsVisitor.VisitColor(HL.Xshtd.XshtdSyntaxDefinition,HL.Xshtd.XshtdColor)">
            <summary>
            Implements the visitor for a named color (<see cref="T:HL.Xshtd.XshtdColor"/> object)
            that is contained in a <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object.
            
            Method checks if given color name is unique and adds the color into the internal
            collection of inique colors if it is.
            </summary>
            <param name="syntax"></param>
            <param name="color"></param>
            <returns>Always returns null. Throws a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException"/>
            if color name is a duplicate.</returns>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.RegisterNamedElementsVisitor.VisitGlobalStyles(HL.Xshtd.XshtdGlobalStyles)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdGlobalStyles"/> object.
            </summary>
            <param name="globStyles">the element to be visited.</param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XmlHighlightingThemeDefinition.TranslateElementVisitor">
            <summary>
            Implements the visitor pattern based on the <see cref="T:HL.Xshtd.IXshtdVisitor"/> interface
            to convert the content of a <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object into a
            <see cref="T:HL.Xshtd.XmlHighlightingThemeDefinition"/> object.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.TranslateElementVisitor.#ctor(HL.Xshtd.XmlHighlightingThemeDefinition,HL.Xshtd.interfaces.IHighlightingThemeDefinitionReferenceResolver)">
            <summary>
            Class constructor.
            </summary>
            <param name="def"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.TranslateElementVisitor.VisitSyntaxDefinition(HL.Xshtd.XshtdSyntaxDefinition)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object.
            </summary>
            <param name="syntax"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.TranslateElementVisitor.VisitColor(HL.Xshtd.XshtdSyntaxDefinition,HL.Xshtd.XshtdColor)">
            <summary>
            Implements the visitor for a named color (<see cref="T:HL.Xshtd.XshtdColor"/> object)
            that is contained in a <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/> object.
            </summary>
            <param name="syntax"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:HL.Xshtd.XmlHighlightingThemeDefinition.TranslateElementVisitor.VisitGlobalStyles(HL.Xshtd.XshtdGlobalStyles)">
            <summary>
            Implements the visitor for the <see cref="T:HL.Xshtd.XshtdGlobalStyles"/> object.
            </summary>
            <param name="globStyles">the element to be visited.</param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XshtdColor">
            <summary>
            A color in an Xshd file.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdColor.#ctor(HL.Xshtd.XshtdSyntaxDefinition)">
            <summary>
            Creates a new XshdColor instance that is part of a <see cref="T:HL.Xshtd.XshtdSyntaxDefinition"/>.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes an XshdColor.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.Name">
            <summary>
            Gets/sets the name.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.Foreground">
            <summary>
            Gets/sets the foreground brush.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.Background">
            <summary>
            Gets/sets the background brush.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.FontWeight">
            <summary>
            Gets/sets the font weight.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.Underline">
            <summary>
            Gets/sets the underline flag
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.FontStyle">
            <summary>
            Gets/sets the font style.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdColor.ExampleText">
            <summary>
            Gets/Sets the example text that demonstrates where the color is used.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this XshdColor instance.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdColor.AcceptVisitor(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XshtdElement">
            <summary>
            An element in a XSHD rule set.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdElement.LineNumber">
            <summary>
            Gets the line number in the .xshd file.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdElement.ColumnNumber">
            <summary>
            Gets the column number in the .xshd file.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdElement.AcceptVisitor(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
        </member>
        <member name="T:HL.Xshtd.XshtdGlobalStyle">
            <summary>
            An element contained in a &lt;GlobalStyles&gt; element.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdGlobalStyle.#ctor(HL.Xshtd.XshtdGlobalStyles)">
            <summary>
            Creates a new XshtdSyntaxDefinition object.
            </summary>
            <param name="styles">Parent collection of styles in which this style occurs.</param>
        </member>
        <member name="M:HL.Xshtd.XshtdGlobalStyle.#ctor">
            <summary>
            Hidden class constructor
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdGlobalStyle.TypeName">
            <summary>
            Gets/sets the style definition name
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdGlobalStyle.foreground">
            <summary>
            Gets/sets the style definition name
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdGlobalStyle.background">
            <summary>
            Gets/sets the style definition name
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdGlobalStyle.bordercolor">
            <summary>
            Gets/sets the style definition name
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdGlobalStyle.AcceptVisitor(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XshtdGlobalStyles">
            <summary>
            A &lt;GlobalStyles&gt; element.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdGlobalStyles.#ctor">
            <summary>
            Creates a new XshtdSyntaxDefinition object.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdGlobalStyles.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdGlobalStyles.AcceptElements(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdGlobalStyles.AcceptVisitor(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="T:HL.Xshtd.XshtdSyntaxDefinition">
            <summary>
            A &lt;SyntaxDefinition&gt; Xml element.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdSyntaxDefinition.#ctor">
            <summary>
            Creates a new XshtdSyntaxDefinition object.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdSyntaxDefinition.Name">
            <summary>
            Gets/sets the definition name
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdSyntaxDefinition.Extensions">
            <summary>
            Gets the associated extensions.
            </summary>
        </member>
        <member name="P:HL.Xshtd.XshtdSyntaxDefinition.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdSyntaxDefinition.AcceptElements(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="M:HL.Xshtd.XshtdSyntaxDefinition.AcceptVisitor(HL.Xshtd.IXshtdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
    </members>
</doc>
