<?xml version="1.0"?>
<SyntaxDefinition name="C#" extensions=".cs" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
  <!--<Color name="Comment"         foreground="#FF55FF00"/>
  <Color name="String"              foreground="#FFFFFF00"/>
  <Color name="StringInterpolation" foreground="White" exampleText="string text = $&quot;Hello, {name}!&quot;"/>
  <Color name="Char"                foreground="#FFFFEF00"/>
  <Color name="Preprocessor"        foreground="#FFFF8080"/>
  <Color name="Punctuation"         foreground="#FFFFCF00"/>

  <Color name="ValueTypeKeywords"     foreground="#FF00A0FF" exampleText="bool b = true;"/>

  <Color name="ReferenceTypeKeywords" foreground="#FFFFA000" exampleText="object o;"/>
  <Color name="MethodCall"            foreground="#FFFFA000"/>
  <Color name="NumberLiteral"         foreground="#FFFFCF00"/>
  <Color name="ThisOrBaseReference"   foreground="#FFFFA000"/>
  <Color name="NullOrValueKeywords"   foreground="#FFFF8000"/>
  <Color name="Keywords"              foreground="#FFFFE000"/>
  <Color name="GotoKeywords"          foreground="#FFFFE000"/>
  <Color name="ContextKeywords"       foreground="#FFFF8000"/>
  <Color name="ExceptionKeywords"     foreground="#FFFF6000"/>
  <Color name="CheckedKeyword"        foreground="#FFFF4000"/>
  <Color name="UnsafeKeywords"        foreground="#FFFFC000"/>
  <Color name="OperatorKeywords"      foreground="#FFFFE000"/>
  <Color name="ParameterModifiers"    foreground="#FFFF8000"/>
  <Color name="Modifiers"             foreground="#FFFF6000"/>
  <Color name="Visibility"            foreground="#FFFF6000"/>
  <Color name="NamespaceKeywords"     foreground="#FFFF4000"/>
  <Color name="GetSetAddRemove"       foreground="#FFFFC000"/>
  <Color name="TrueFalse"             foreground="#FFFF4000"/>
  <Color name="TypeKeywords"          foreground="#FFFFC000"/>
  <Color name="SemanticKeywords"      foreground="#FFFF5AB3" fontWeight="bold" exampleText="if (args == null) throw new ArgumentNullException(nameof(args));" />

  <Color name="CommentMarkerSetTodo"       foreground="#FFFF0000" fontWeight="bold" />
  <Color name="CommentMarkerSetHackUndone" foreground="#FF8B008B" fontWeight="bold" />
  <Property name="DocCommentMarker" value="///" />
  <Property name="Background" value="Red"/>-->

  <RuleSet name="CommentMarkerSet">
    <Keywords fontWeight="bold" foreground="Red">
      <Word>TODO</Word>
      <Word>FIXME</Word>
    </Keywords>
    <Keywords fontWeight="bold" foreground="#E0E000">
      <Word>HACK</Word>
      <Word>UNDONE</Word>
    </Keywords>
  </RuleSet>

  <!-- This is the main ruleset. -->
  <RuleSet>
    <Span >
      <Begin>\#</Begin>
      <RuleSet name="PreprocessorSet">
        <Span>
          <!-- preprocessor directives that allows comments -->
          <Begin >
            (define|undef|if|elif|else|endif|line)\b
          </Begin>
          <RuleSet>
            <Span ruleSet="CommentMarkerSet">
              <Begin>//</Begin>
            </Span>
          </RuleSet>
        </Span>
        <Span>
          <!-- preprocessor directives that don't allow comments -->
          <Begin >
            (region|endregion|error|warning|pragma)\b
          </Begin>
        </Span>
      </RuleSet>
    </Span>

    <Span >
      <Begin >///(?!/)</Begin>
      <RuleSet>
        <Import ruleSet="XmlDoc/DocCommentSet"/>
        <Import ruleSet="CommentMarkerSet"/>
      </RuleSet>
    </Span>

    <Span ruleSet="CommentMarkerSet">
      <Begin>//</Begin>
    </Span>

    <Span ruleSet="CommentMarkerSet" multiline="true">
      <Begin>/\*</Begin>
      <End>\*/</End>
    </Span>

    <Span>
      <Begin>"</Begin>
      <End>"</End>
      <RuleSet>
        <!-- span for escape sequences -->
        <Span begin="\\" end="."/>
      </RuleSet>
    </Span>

    <Span >
      <Begin>'</Begin>
      <End>'</End>
      <RuleSet>
        <!-- span for escape sequences -->
        <Span begin="\\" end="."/>
      </RuleSet>
    </Span>

    <Span  multiline="true">
      <Begin>@"</Begin>
      <End>"</End>
      <RuleSet>
        <!-- span for escape sequences -->
        <Span begin='""' end=""/>
      </RuleSet>
    </Span>

    <Span >
      <Begin>\$"</Begin>
      <End>"</End>
      <RuleSet>
        <!-- span for escape sequences -->
        <Span begin="\\" end="."/>
        <Span begin="\{\{" end=""/>
        <!-- string interpolation -->
        <Span begin="{" end="}" ruleSet=""/>
      </RuleSet>
    </Span>

    <!-- don't highlight "@int" as keyword -->
    <Rule>
      @[\w\d_]+
    </Rule>

    <Keywords >
      <Word>this</Word>
      <Word>base</Word>
    </Keywords>

    <Keywords >
      <Word>as</Word>
      <Word>is</Word>
      <Word>new</Word>
      <Word>sizeof</Word>
      <Word>typeof</Word>
      <Word>stackalloc</Word>
    </Keywords>

    <Keywords >
      <Word>true</Word>
      <Word>false</Word>
    </Keywords>

    <Keywords >
      <Word>else</Word>
      <Word>if</Word>
      <Word>switch</Word>
      <Word>case</Word>
      <Word>default</Word>
      <Word>do</Word>
      <Word>for</Word>
      <Word>foreach</Word>
      <Word>in</Word>
      <Word>while</Word>
      <Word>lock</Word>
    </Keywords>

    <Keywords>
      <Word>break</Word>
      <Word>continue</Word>
      <Word>goto</Word>
      <Word>return</Word>
    </Keywords>

    <Keywords>
      <Word>yield</Word>
      <Word>partial</Word>
      <Word>global</Word>
      <Word>where</Word>
      <Word>select</Word>
      <Word>group</Word>
      <Word>by</Word>
      <Word>into</Word>
      <Word>from</Word>
      <Word>ascending</Word>
      <Word>descending</Word>
      <Word>orderby</Word>
      <Word>let</Word>
      <Word>join</Word>
      <Word>on</Word>
      <Word>equals</Word>
      <Word>var</Word>
      <Word>dynamic</Word>
      <Word>await</Word>
    </Keywords>

    <Keywords>
      <Word>try</Word>
      <Word>throw</Word>
      <Word>catch</Word>
      <Word>finally</Word>
    </Keywords>

    <Keywords>
      <Word>checked</Word>
      <Word>unchecked</Word>
    </Keywords>

    <Keywords>
      <Word>fixed</Word>
      <Word>unsafe</Word>
    </Keywords>

    <Keywords>
      <Word>bool</Word>
      <Word>byte</Word>
      <Word>char</Word>
      <Word>decimal</Word>
      <Word>double</Word>
      <Word>enum</Word>
      <Word>float</Word>
      <Word>int</Word>
      <Word>long</Word>
      <Word>sbyte</Word>
      <Word>short</Word>
      <Word>struct</Word>
      <Word>uint</Word>
      <Word>ushort</Word>
      <Word>ulong</Word>
    </Keywords>

    <Keywords>
      <Word>class</Word>
      <Word>interface</Word>
      <Word>delegate</Word>
      <Word>object</Word>
      <Word>string</Word>
      <Word>void</Word>
    </Keywords>

    <Keywords>
      <Word>explicit</Word>
      <Word>implicit</Word>
      <Word>operator</Word>
    </Keywords>

    <Keywords>
      <Word>params</Word>
      <Word>ref</Word>
      <Word>out</Word>
    </Keywords>

    <Keywords>
      <Word>abstract</Word>
      <Word>const</Word>
      <Word>event</Word>
      <Word>extern</Word>
      <Word>override</Word>
      <Word>readonly</Word>
      <Word>sealed</Word>
      <Word>static</Word>
      <Word>virtual</Word>
      <Word>volatile</Word>
      <Word>async</Word>
    </Keywords>

    <Keywords>
      <Word>public</Word>
      <Word>protected</Word>
      <Word>private</Word>
      <Word>internal</Word>
    </Keywords>

    <Keywords>
      <Word>namespace</Word>
      <Word>using</Word>
    </Keywords>

    <Keywords>
      <Word>get</Word>
      <Word>set</Word>
      <Word>add</Word>
      <Word>remove</Word>
    </Keywords>

    <Keywords>
      <Word>null</Word>
      <Word>value</Word>
    </Keywords>

    <Keywords>
      <Word>nameof</Word>
    </Keywords>

    <!-- Mark previous rule-->
    <Rule>
      \b
      [\d\w_]+  # an identifier
      (?=\s*\() # followed by (
    </Rule>

    <!-- Digits -->
    <Rule>
      \b0[xX][0-9a-fA-F]+  # hex number
      |
      (	\b\d+(\.[0-9]+)?   #number with optional floating point
      |	\.[0-9]+           #or just starting with floating point
      )
      ([eE][+-]?[0-9]+)? # optional exponent
    </Rule>

    <Rule>
      [?,.;()\[\]{}+\-/%*&lt;&gt;^+~!|&amp;]+
    </Rule>
  </RuleSet>
</SyntaxDefinition>