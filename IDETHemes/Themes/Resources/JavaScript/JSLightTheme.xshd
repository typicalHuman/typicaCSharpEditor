<?xml version="1.0"?>

  <SyntaxDefinition name="CPP" extensions=".cpp" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
    <Color name="Comment"             foreground="#008000" exampleText="// comment" />
    <Color name="String"              foreground="#a31515" exampleText="string text = &quot;Hello, World!&quot;"/>
    <Color name="StringInterpolation" foreground="#FFffd68f" exampleText="string text = $&quot;Hello, {name}!&quot;"/>
    <Color name="Char"                foreground="#b11414" exampleText="char linefeed = '\n';"/>
    <Color name="Preprocessor"        foreground="#FF9B9B9B" exampleText="#region Title"/>
    <Color name="Punctuation"         foreground="Black" exampleText="a(b.c);"/>

    <Color name="ValueTypeKeywords"     foreground="#299ac6"/>
    <Color name="ValueStructKeyword"     foreground="#319ac6"/>
    <Color name="ValueInterfaceKeyword"   foreground="#319ac6"/>
    <Color name="ValueClassKeyword" foreground="#45c981"/>



    <Color name="ReferenceTypeKeywords" foreground="#101cff" exampleText="object o;"/>
    <Color name="MethodCall"            foreground="Red" exampleText="o.ToString();"/>
    <Color name="NumberLiteral"         foreground="Black" exampleText="3.1415f"/>
    <Color name="ThisOrBaseReference"   foreground="#FF3a6a9b" exampleText="this.Do(); base.Do();"/>
    <Color name="NullOrValueKeywords"   foreground="#101cff" exampleText="if (value == null)"/>
    <Color name="Keywords"              foreground="#FFd8a0df" exampleText="if (a) {} else {}"/>
    <Color name="GotoKeywords"          foreground="#FFd8a0df" exampleText="continue; return null;"/>
    <Color name="ContextKeywords"       foreground="#FFd8a0df" exampleText="var a = from x in y select z;"/>
    <Color name="ExceptionKeywords"     foreground="#FFd8a0df" exampleText="try {} catch {} finally {}"/>
    <Color name="CheckedKeyword"        foreground="#101cff" exampleText="checked {}"/>
    <Color name="UnsafeKeywords"        foreground="#101cff" exampleText="unsafe { fixed (..) {} }"/>
    <Color name="OperatorKeywords"      foreground="#FFD69D85" exampleText="public static implicit operator..."/>
    <Color name="ParameterModifiers"    foreground="#101cff" exampleText="(ref int a, params int[] b)"/>
    <Color name="Modifiers"             foreground="#101cff" exampleText="static readonly int a;"/>
    <Color name="Visibility"            foreground="#101cff" exampleText="public override void ToString();"/>
    <Color name="NamespaceKeywords"     foreground="#101cff" exampleText="namespace A.B { using System; }"/>
    <Color name="GetSetAddRemove"       foreground="#101cff" exampleText="int Prop { get; set; }"/>
    <Color name="TrueFalse"             foreground="#FF00A0FF" exampleText="b = false; a = true;"/>
    <Color name="TypeKeywords"          foreground="#101cff" exampleText="if (x is int) { a = x as int; type = typeof(int); size = sizeof(int); c = new object(); }"/>
    <Color name="SemanticKeywords"      foreground="#101cff" fontWeight="bold" exampleText="if (args == null) throw new ArgumentNullException(nameof(args));" />

    <Color name="CommentMarkerSetTodo"       foreground="#FFFF0000" fontWeight="bold" />
    <Color name="CommentMarkerSetHackUndone" foreground="#FF8B008B" fontWeight="bold" />

    <Color name="Default" background="White" foreground="Black"/>
    <Color name="LineNumbersForeground" foreground="#399ac6"/>
    <Color name="Selection" background="#9da7c3"/>
    <Color name="Hyperlink" foreground="#0000ff"/>
    <Color name="NonPrintableCharacters" foreground="Orange" />

    <!--Completion-->
    <Color name="CompletionBorder" background="Gray"/>
    <Color name="CompletionColors" background="#f5f5f5" foreground="Black"/>
    <Color name="CompletionSelectionBrush" background="#3399ff"/>

    <Property name="DocCommentMarker" value="///" />

    <RuleSet name="CommentMarkerSet">
      <Keywords color="CommentMarkerSetTodo">
        <Word>TODO</Word>
        <Word>FIXME</Word>
      </Keywords>
      <Keywords color="CommentMarkerSetHackUndone">
        <Word>HACK</Word>
        <Word>UNDONE</Word>
      </Keywords>
    </RuleSet>

    <!-- This is the main ruleset. -->
    <RuleSet>
      
  
        
      <Span color="Comment">
        <Begin color="XmlDoc/DocComment">///(?!/)</Begin>
        <RuleSet>
          <Import ruleSet="XmlDoc/DocCommentSet"/>
          <Import  ruleSet="CommentMarkerSet" />
        </RuleSet>
      </Span>

      <Span color="Comment" ruleSet="CommentMarkerSet">
        <Begin>//</Begin>
      </Span>
      

      <Span color="Comment" ruleSet="CommentMarkerSet" multiline="true">
        <Begin>/\*</Begin>
        <End>\*/</End>
      </Span>
      
      <Span color="Preprocessor">
        <Begin>\#</Begin>
      </Span>

      <Span color="String">
        <Begin>"</Begin>
        <End>"</End>
        <RuleSet>
          <!-- span for escape sequences -->
          <Span begin="\\" end="."/>
        </RuleSet>
      </Span>

      <Span color="Char">
        <Begin>'</Begin>
        <End>'</End>
        <RuleSet>
          <!-- span for escape sequences -->
          <Span begin="\\" end="."/>
        </RuleSet>
      </Span>

      <Keywords color="Keywords">
        <Word>break</Word>
        <Word>continue</Word>
        <Word>delete</Word>
        <Word>else</Word>
        <Word>for</Word>
        <Word>function</Word>
        <Word>if</Word>
        <Word>in</Word>
        <Word>new</Word>
        <Word>return</Word>
        <Word>this</Word>
        <Word>typeof</Word>
        <Word>while</Word>
        <Word>with</Word>
        <Word>case</Word>
        <Word>catch</Word>
        <Word>debugger</Word>
        <Word>default</Word>
        <Word>do</Word>
        <Word>export</Word>
        <Word>extends</Word>
        <Word>final</Word>
        <Word>finally</Word>
        <Word>goto</Word>
        <Word>implements</Word>
        <Word>import</Word>
        <Word>instanceof</Word>
        <Word>package</Word>
        <Word>switch</Word>
        <Word>throw</Word>
        <Word>throws</Word>
        <Word>try</Word>

      </Keywords>
      <Keywords color="ValueTypeKeywords">
        <Word>Array</Word>
        <Word>Boolean</Word>
        <Word>abstract</Word>
        <Word>native</Word>
        <Word>boolean</Word>
        <Word>synchronized</Word>
        <Word>byte</Word>
        <Word>var</Word>
        <Word>void</Word>
        <Word>Date</Word>
        <Word>Function</Word>
        <Word>float</Word>
        <Word>char</Word>
        <Word>class</Word>
        <Word>const</Word>
        <Word>Global</Word>
        <Word>Math</Word>
        <Word>volatile</Word>
        <Word>double</Word>
        <Word>enum</Word>
        <Word>Number</Word>
        <Word>private</Word>
        <Word>protected</Word>
        <Word>public</Word>
        <Word>short</Word>
        <Word>static</Word>
        <Word>super</Word>
        <Word>transient</Word>
        <Word>Object</Word>
        <Word>RegExp</Word>
        <Word>String</Word>
        <Word>int</Word>
        <Word>interface</Word>
        <Word>long</Word>
      </Keywords>
      <Keywords color="ValueTypeKeywords">
        <Word>false</Word>
        <Word>null</Word>
        <Word>true</Word>
        <Word>NaN</Word>
        <Word>Infinity</Word>
      </Keywords>
      <Keywords color="ValueStructKeyword">
        <Word>eval</Word>
        <Word>parseInt</Word>
        <Word>parseFloat</Word>
        <Word>escape</Word>
        <Word>unescape</Word>
        <Word>isNaN</Word>
        <Word>isFinite</Word>
      </Keywords>


      <!-- Mark previous rule-->
      <Rule color="MethodCall">
        \b
        [\d\w_]+  # an identifier
        (?=\s*\() # followed by (
      </Rule>


      <!-- Digits -->
      <Rule color="NumberLiteral">
        \b0[xX][0-9a-fA-F]+  # hex number
        |
        (	\b\d+(\.[0-9]+)?   #number with optional floating point
        |	\.[0-9]+           #or just starting with floating point
        )
        ([eE][+-]?[0-9]+)? # optional exponent
      </Rule>

      <Rule color="Punctuation">
        [?,.;()\[\]{}+\-/%*&lt;&gt;^+~!|&amp;]+
      </Rule>
    </RuleSet>
  </SyntaxDefinition>
