<?xml version="1.0"?>

  <SyntaxDefinition name="Python" extensions="py" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
    <Color name="Comment"             foreground="#FF57A64A" exampleText="// comment" />
    <Color name="String"              foreground="#FFD69D85" exampleText="string text = &quot;Hello, World!&quot;"/>
    <Color name="StringInterpolation" foreground="#FFffd68f" exampleText="string text = $&quot;Hello, {name}!&quot;"/>
    <Color name="Char"                foreground="#FFD69D85" exampleText="char linefeed = '\n';"/>
    <Color name="Preprocessor"        foreground="#FF9B9B9B" exampleText="#region Title"/>
    <Color name="Punctuation"         foreground="#dcdcdc" exampleText="a(b.c);"/>

    <Color name="ValueTypeKeywords"     foreground="#399ac6"/>
    <Color name="ValueStructKeyword"     foreground="#86c691"/>
    <Color name="ValueInterfaceKeyword"   foreground="#b8d7a3"/>
    <Color name="ValueClassKeyword" foreground="#45c981"/>


    <Color name="ReferenceTypeKeywords" foreground="#FF559CD6" exampleText="object o;"/>
    <Color name="MethodCall"            foreground="#FFdcdcaa" exampleText="o.ToString();"/>
    <Color name="NumberLiteral"         foreground="#FFb5cea8" exampleText="3.1415f"/>
    <Color name="ThisOrBaseReference"   foreground="#FF3a6a9b" exampleText="this.Do(); base.Do();"/>
    <Color name="NullOrValueKeywords"   foreground="#FF559CD6" exampleText="if (value == null)"/>
    <Color name="Keywords"              foreground="#FFd8a0df" exampleText="if (a) {} else {}"/>
    <Color name="GotoKeywords"          foreground="#FFd8a0df" exampleText="continue; return null;"/>
    <Color name="ContextKeywords"       foreground="#FFd8a0df" exampleText="var a = from x in y select z;"/>
    <Color name="ExceptionKeywords"     foreground="#FFd8a0df" exampleText="try {} catch {} finally {}"/>
    <Color name="CheckedKeyword"        foreground="#FF559CD6" exampleText="checked {}"/>
    <Color name="UnsafeKeywords"        foreground="#FF559CD6" exampleText="unsafe { fixed (..) {} }"/>
    <Color name="OperatorKeywords"      foreground="#FFD69D85" exampleText="public static implicit operator..."/>
    <Color name="ParameterModifiers"    foreground="#FF559CD6" exampleText="(ref int a, params int[] b)"/>
    <Color name="Modifiers"             foreground="#FF559CD6" exampleText="static readonly int a;"/>
    <Color name="Visibility"            foreground="#FF559CD6" exampleText="public override void ToString();"/>
    <Color name="NamespaceKeywords"     foreground="#FF559CD6" exampleText="namespace A.B { using System; }"/>
    <Color name="GetSetAddRemove"       foreground="#FF559CD6" exampleText="int Prop { get; set; }"/>
    <Color name="TrueFalse"             foreground="#FF00A0FF" exampleText="b = false; a = true;"/>
    <Color name="TypeKeywords"          foreground="#FF559CD6" exampleText="if (x is int) { a = x as int; type = typeof(int); size = sizeof(int); c = new object(); }"/>
    <Color name="SemanticKeywords"      foreground="#FF559CD6" fontWeight="bold" exampleText="if (args == null) throw new ArgumentNullException(nameof(args));" />

    <Color name="CommentMarkerSetTodo"       foreground="#FFFF0000" fontWeight="bold" />
    <Color name="CommentMarkerSetHackUndone" foreground="#FF8B008B" fontWeight="bold" />

    <Color name="Default" background="#1b1c1b" foreground="#dcdcdc"/>
    <Color name="LineNumbersForeground" foreground="#2b91af"/>
    <Color name="Selection" background="#264f98"/>
    <Color name="Hyperlink" foreground="#2f70d5"/>
    <Color name="NonPrintableCharacters" foreground="#FFFFFF00" />
    
    <!--Completion-->
    <Color name="CompletionBorder" background="#999999"/>
    <Color name="CompletionColors" background="#252526" foreground="White"/>
    <Color name="CompletionSelectionBrush" background="#3399ff"/>

    <Property name="DocCommentMarker" value="///" />

    <RuleSet name="CommentMarkerSet">
      <Keywords color="CommentMarkerSetTodo">
        <Word>TODO</Word>
        <Word>FIXME</Word>
      </Keywords>
      <Keywords color="CommentMarkerSetHackUndone">
        <Word>HACK</Word>
        <Word>UNDONE</Word>
      </Keywords>
    </RuleSet>
 <RuleSet>

   <Span color="Comment" ruleSet="CommentMarkerSet">
        <Begin>\#</Begin>
      </Span>     

      <Span color="String">
        <Begin>"</Begin>
        <End>"</End>
        <RuleSet>
          <!-- span for escape sequences -->
          <Span begin="\\" end="."/>
        </RuleSet>
      </Span>
      
      <Span color="Char">
        <Begin>'</Begin>
        <End>'</End>
        <RuleSet>
          <!-- span for escape sequences -->
          <Span begin="\\" end="."/>
        </RuleSet>
      </Span>
      
      <Keywords color="TrueFalse">
        <Word>true</Word>
        <Word>false</Word>
        <Word>False</Word>
        <Word>True</Word>
      </Keywords>

      <Keywords color="Keywords">
        <Word>else</Word>
        <Word>import</Word>
        <Word>pass</Word>
        <Word>break</Word>
        <Word>except</Word>
        <Word>in</Word>
        <Word>raise</Word>
        <Word>finally</Word>
        <Word>is</Word>
        <Word>return</Word>
        <Word>and</Word>
        <Word>continue</Word>
        <Word>for</Word>
        <Word>lambda</Word>
        <Word>try</Word>
        <Word>as</Word>
        <Word>def</Word>
        <Word>from</Word>
        <Word>while</Word>
        <Word>assert</Word>
        <Word>del</Word>
        <Word>not</Word>
        <Word>with</Word>
        <Word>elif</Word>
        <Word>if</Word>
        <Word>or</Word>
        <Word>yield</Word>
      </Keywords>

    <Keywords color="ValueTypeKeywords">
      <Word>none</Word>
      <Word>None</Word>
      <Word>class</Word>
      <Word>nonlocal</Word>
      <Word>async</Word>
      <Word>await</Word>
      <Word>global</Word>
    </Keywords>



      <!-- Mark previous rule-->
      <Rule color="MethodCall">
        \b
        [\d\w_]+  # an identifier
        (?=\s*\() # followed by (
      </Rule>


      <!-- Digits -->
      <Rule color="NumberLiteral">
        \b0[xX][0-9a-fA-F]+  # hex number
        |
        (	\b\d+(\.[0-9]+)?   #number with optional floating point
        |	\.[0-9]+           #or just starting with floating point
        )
        ([eE][+-]?[0-9]+)? # optional exponent
      </Rule>

      <Rule color="Punctuation">
        [?,.;()\[\]{}+\-/%*&lt;&gt;^+~!|&amp;]+
      </Rule>
    </RuleSet>
  </SyntaxDefinition>
